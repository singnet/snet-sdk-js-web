/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_descriptor_pb = require('google-protobuf/google/protobuf/descriptor_pb.js');
goog.exportSymbol('training.AccessibleModelsRequest', null, global);
goog.exportSymbol('training.AccessibleModelsResponse', null, global);
goog.exportSymbol('training.AuthorizationDetails', null, global);
goog.exportSymbol('training.CreateModelRequest', null, global);
goog.exportSymbol('training.ModelDetails', null, global);
goog.exportSymbol('training.ModelDetailsRequest', null, global);
goog.exportSymbol('training.ModelDetailsResponse', null, global);
goog.exportSymbol('training.Status', null, global);
goog.exportSymbol('training.TrainingMethodOption', null, global);
goog.exportSymbol('training.UpdateModelRequest', null, global);
goog.exportSymbol('training.myMethodOption', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
training.ModelDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, training.ModelDetails.repeatedFields_, null);
};
goog.inherits(training.ModelDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  training.ModelDetails.displayName = 'training.ModelDetails';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
training.ModelDetails.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
training.ModelDetails.prototype.toObject = function(opt_includeInstance) {
  return training.ModelDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!training.ModelDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
training.ModelDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    grpcMethodName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    grpcServiceName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    status: jspb.Message.getFieldWithDefault(msg, 6, ""),
    updatedDate: jspb.Message.getFieldWithDefault(msg, 7, ""),
    addressListList: jspb.Message.getRepeatedField(msg, 8),
    trainingDataLink: jspb.Message.getFieldWithDefault(msg, 9, ""),
    modelName: jspb.Message.getFieldWithDefault(msg, 10, ""),
    organizationId: jspb.Message.getFieldWithDefault(msg, 11, ""),
    serviceId: jspb.Message.getFieldWithDefault(msg, 12, ""),
    groupId: jspb.Message.getFieldWithDefault(msg, 13, ""),
    isPubliclyAccessible: jspb.Message.getFieldWithDefault(msg, 14, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!training.ModelDetails}
 */
training.ModelDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new training.ModelDetails;
  return training.ModelDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!training.ModelDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!training.ModelDetails}
 */
training.ModelDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrpcMethodName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrpcServiceName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedDate(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddressList(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrainingDataLink(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelName(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizationId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceId(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupId(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPubliclyAccessible(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
training.ModelDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  training.ModelDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!training.ModelDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
training.ModelDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModelId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGrpcMethodName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGrpcServiceName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUpdatedDate();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAddressListList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getTrainingDataLink();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getModelName();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getOrganizationId();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getServiceId();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getGroupId();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getIsPubliclyAccessible();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
};


/**
 * optional string model_id = 1;
 * @return {string}
 */
training.ModelDetails.prototype.getModelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
training.ModelDetails.prototype.setModelId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string grpc_method_name = 2;
 * @return {string}
 */
training.ModelDetails.prototype.getGrpcMethodName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
training.ModelDetails.prototype.setGrpcMethodName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string grpc_service_name = 3;
 * @return {string}
 */
training.ModelDetails.prototype.getGrpcServiceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
training.ModelDetails.prototype.setGrpcServiceName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
training.ModelDetails.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
training.ModelDetails.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string status = 6;
 * @return {string}
 */
training.ModelDetails.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
training.ModelDetails.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string updated_date = 7;
 * @return {string}
 */
training.ModelDetails.prototype.getUpdatedDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
training.ModelDetails.prototype.setUpdatedDate = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated string address_list = 8;
 * @return {!Array<string>}
 */
training.ModelDetails.prototype.getAddressListList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array<string>} value */
training.ModelDetails.prototype.setAddressListList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
training.ModelDetails.prototype.addAddressList = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


training.ModelDetails.prototype.clearAddressListList = function() {
  this.setAddressListList([]);
};


/**
 * optional string training_data_link = 9;
 * @return {string}
 */
training.ModelDetails.prototype.getTrainingDataLink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
training.ModelDetails.prototype.setTrainingDataLink = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string model_name = 10;
 * @return {string}
 */
training.ModelDetails.prototype.getModelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
training.ModelDetails.prototype.setModelName = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string organization_id = 11;
 * @return {string}
 */
training.ModelDetails.prototype.getOrganizationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
training.ModelDetails.prototype.setOrganizationId = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string service_id = 12;
 * @return {string}
 */
training.ModelDetails.prototype.getServiceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
training.ModelDetails.prototype.setServiceId = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string group_id = 13;
 * @return {string}
 */
training.ModelDetails.prototype.getGroupId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
training.ModelDetails.prototype.setGroupId = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional bool is_publicly_accessible = 14;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
training.ModelDetails.prototype.getIsPubliclyAccessible = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
training.ModelDetails.prototype.setIsPubliclyAccessible = function(value) {
  jspb.Message.setProto3BooleanField(this, 14, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
training.AuthorizationDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(training.AuthorizationDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  training.AuthorizationDetails.displayName = 'training.AuthorizationDetails';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
training.AuthorizationDetails.prototype.toObject = function(opt_includeInstance) {
  return training.AuthorizationDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!training.AuthorizationDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
training.AuthorizationDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentBlock: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    signature: msg.getSignature_asB64(),
    signerAddress: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!training.AuthorizationDetails}
 */
training.AuthorizationDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new training.AuthorizationDetails;
  return training.AuthorizationDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!training.AuthorizationDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!training.AuthorizationDetails}
 */
training.AuthorizationDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCurrentBlock(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignerAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
training.AuthorizationDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  training.AuthorizationDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!training.AuthorizationDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
training.AuthorizationDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentBlock();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getSignerAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint64 current_block = 1;
 * @return {number}
 */
training.AuthorizationDetails.prototype.getCurrentBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
training.AuthorizationDetails.prototype.setCurrentBlock = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
training.AuthorizationDetails.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
training.AuthorizationDetails.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes signature = 3;
 * @return {!(string|Uint8Array)}
 */
training.AuthorizationDetails.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes signature = 3;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
training.AuthorizationDetails.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
training.AuthorizationDetails.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
training.AuthorizationDetails.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string signer_address = 4;
 * @return {string}
 */
training.AuthorizationDetails.prototype.getSignerAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
training.AuthorizationDetails.prototype.setSignerAddress = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
training.CreateModelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(training.CreateModelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  training.CreateModelRequest.displayName = 'training.CreateModelRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
training.CreateModelRequest.prototype.toObject = function(opt_includeInstance) {
  return training.CreateModelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!training.CreateModelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
training.CreateModelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    authorization: (f = msg.getAuthorization()) && training.AuthorizationDetails.toObject(includeInstance, f),
    modelDetails: (f = msg.getModelDetails()) && training.ModelDetails.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!training.CreateModelRequest}
 */
training.CreateModelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new training.CreateModelRequest;
  return training.CreateModelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!training.CreateModelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!training.CreateModelRequest}
 */
training.CreateModelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new training.AuthorizationDetails;
      reader.readMessage(value,training.AuthorizationDetails.deserializeBinaryFromReader);
      msg.setAuthorization(value);
      break;
    case 2:
      var value = new training.ModelDetails;
      reader.readMessage(value,training.ModelDetails.deserializeBinaryFromReader);
      msg.setModelDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
training.CreateModelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  training.CreateModelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!training.CreateModelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
training.CreateModelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthorization();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      training.AuthorizationDetails.serializeBinaryToWriter
    );
  }
  f = message.getModelDetails();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      training.ModelDetails.serializeBinaryToWriter
    );
  }
};


/**
 * optional AuthorizationDetails authorization = 1;
 * @return {?training.AuthorizationDetails}
 */
training.CreateModelRequest.prototype.getAuthorization = function() {
  return /** @type{?training.AuthorizationDetails} */ (
    jspb.Message.getWrapperField(this, training.AuthorizationDetails, 1));
};


/** @param {?training.AuthorizationDetails|undefined} value */
training.CreateModelRequest.prototype.setAuthorization = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


training.CreateModelRequest.prototype.clearAuthorization = function() {
  this.setAuthorization(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
training.CreateModelRequest.prototype.hasAuthorization = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ModelDetails model_details = 2;
 * @return {?training.ModelDetails}
 */
training.CreateModelRequest.prototype.getModelDetails = function() {
  return /** @type{?training.ModelDetails} */ (
    jspb.Message.getWrapperField(this, training.ModelDetails, 2));
};


/** @param {?training.ModelDetails|undefined} value */
training.CreateModelRequest.prototype.setModelDetails = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


training.CreateModelRequest.prototype.clearModelDetails = function() {
  this.setModelDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
training.CreateModelRequest.prototype.hasModelDetails = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
training.AccessibleModelsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(training.AccessibleModelsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  training.AccessibleModelsRequest.displayName = 'training.AccessibleModelsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
training.AccessibleModelsRequest.prototype.toObject = function(opt_includeInstance) {
  return training.AccessibleModelsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!training.AccessibleModelsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
training.AccessibleModelsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    grpcMethodName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    grpcServiceName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    authorization: (f = msg.getAuthorization()) && training.AuthorizationDetails.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!training.AccessibleModelsRequest}
 */
training.AccessibleModelsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new training.AccessibleModelsRequest;
  return training.AccessibleModelsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!training.AccessibleModelsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!training.AccessibleModelsRequest}
 */
training.AccessibleModelsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrpcMethodName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrpcServiceName(value);
      break;
    case 3:
      var value = new training.AuthorizationDetails;
      reader.readMessage(value,training.AuthorizationDetails.deserializeBinaryFromReader);
      msg.setAuthorization(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
training.AccessibleModelsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  training.AccessibleModelsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!training.AccessibleModelsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
training.AccessibleModelsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGrpcMethodName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGrpcServiceName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAuthorization();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      training.AuthorizationDetails.serializeBinaryToWriter
    );
  }
};


/**
 * optional string grpc_method_name = 1;
 * @return {string}
 */
training.AccessibleModelsRequest.prototype.getGrpcMethodName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
training.AccessibleModelsRequest.prototype.setGrpcMethodName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string grpc_service_name = 2;
 * @return {string}
 */
training.AccessibleModelsRequest.prototype.getGrpcServiceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
training.AccessibleModelsRequest.prototype.setGrpcServiceName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional AuthorizationDetails authorization = 3;
 * @return {?training.AuthorizationDetails}
 */
training.AccessibleModelsRequest.prototype.getAuthorization = function() {
  return /** @type{?training.AuthorizationDetails} */ (
    jspb.Message.getWrapperField(this, training.AuthorizationDetails, 3));
};


/** @param {?training.AuthorizationDetails|undefined} value */
training.AccessibleModelsRequest.prototype.setAuthorization = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


training.AccessibleModelsRequest.prototype.clearAuthorization = function() {
  this.setAuthorization(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
training.AccessibleModelsRequest.prototype.hasAuthorization = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
training.AccessibleModelsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, training.AccessibleModelsResponse.repeatedFields_, null);
};
goog.inherits(training.AccessibleModelsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  training.AccessibleModelsResponse.displayName = 'training.AccessibleModelsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
training.AccessibleModelsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
training.AccessibleModelsResponse.prototype.toObject = function(opt_includeInstance) {
  return training.AccessibleModelsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!training.AccessibleModelsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
training.AccessibleModelsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    listOfModelsList: jspb.Message.toObjectList(msg.getListOfModelsList(),
    training.ModelDetails.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!training.AccessibleModelsResponse}
 */
training.AccessibleModelsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new training.AccessibleModelsResponse;
  return training.AccessibleModelsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!training.AccessibleModelsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!training.AccessibleModelsResponse}
 */
training.AccessibleModelsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new training.ModelDetails;
      reader.readMessage(value,training.ModelDetails.deserializeBinaryFromReader);
      msg.addListOfModels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
training.AccessibleModelsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  training.AccessibleModelsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!training.AccessibleModelsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
training.AccessibleModelsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListOfModelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      training.ModelDetails.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ModelDetails list_of_models = 1;
 * @return {!Array<!training.ModelDetails>}
 */
training.AccessibleModelsResponse.prototype.getListOfModelsList = function() {
  return /** @type{!Array<!training.ModelDetails>} */ (
    jspb.Message.getRepeatedWrapperField(this, training.ModelDetails, 1));
};


/** @param {!Array<!training.ModelDetails>} value */
training.AccessibleModelsResponse.prototype.setListOfModelsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!training.ModelDetails=} opt_value
 * @param {number=} opt_index
 * @return {!training.ModelDetails}
 */
training.AccessibleModelsResponse.prototype.addListOfModels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, training.ModelDetails, opt_index);
};


training.AccessibleModelsResponse.prototype.clearListOfModelsList = function() {
  this.setListOfModelsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
training.ModelDetailsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(training.ModelDetailsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  training.ModelDetailsRequest.displayName = 'training.ModelDetailsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
training.ModelDetailsRequest.prototype.toObject = function(opt_includeInstance) {
  return training.ModelDetailsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!training.ModelDetailsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
training.ModelDetailsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelDetails: (f = msg.getModelDetails()) && training.ModelDetails.toObject(includeInstance, f),
    authorization: (f = msg.getAuthorization()) && training.AuthorizationDetails.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!training.ModelDetailsRequest}
 */
training.ModelDetailsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new training.ModelDetailsRequest;
  return training.ModelDetailsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!training.ModelDetailsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!training.ModelDetailsRequest}
 */
training.ModelDetailsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new training.ModelDetails;
      reader.readMessage(value,training.ModelDetails.deserializeBinaryFromReader);
      msg.setModelDetails(value);
      break;
    case 2:
      var value = new training.AuthorizationDetails;
      reader.readMessage(value,training.AuthorizationDetails.deserializeBinaryFromReader);
      msg.setAuthorization(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
training.ModelDetailsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  training.ModelDetailsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!training.ModelDetailsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
training.ModelDetailsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModelDetails();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      training.ModelDetails.serializeBinaryToWriter
    );
  }
  f = message.getAuthorization();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      training.AuthorizationDetails.serializeBinaryToWriter
    );
  }
};


/**
 * optional ModelDetails model_details = 1;
 * @return {?training.ModelDetails}
 */
training.ModelDetailsRequest.prototype.getModelDetails = function() {
  return /** @type{?training.ModelDetails} */ (
    jspb.Message.getWrapperField(this, training.ModelDetails, 1));
};


/** @param {?training.ModelDetails|undefined} value */
training.ModelDetailsRequest.prototype.setModelDetails = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


training.ModelDetailsRequest.prototype.clearModelDetails = function() {
  this.setModelDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
training.ModelDetailsRequest.prototype.hasModelDetails = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AuthorizationDetails authorization = 2;
 * @return {?training.AuthorizationDetails}
 */
training.ModelDetailsRequest.prototype.getAuthorization = function() {
  return /** @type{?training.AuthorizationDetails} */ (
    jspb.Message.getWrapperField(this, training.AuthorizationDetails, 2));
};


/** @param {?training.AuthorizationDetails|undefined} value */
training.ModelDetailsRequest.prototype.setAuthorization = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


training.ModelDetailsRequest.prototype.clearAuthorization = function() {
  this.setAuthorization(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
training.ModelDetailsRequest.prototype.hasAuthorization = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
training.TrainingMethodOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(training.TrainingMethodOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  training.TrainingMethodOption.displayName = 'training.TrainingMethodOption';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
training.TrainingMethodOption.prototype.toObject = function(opt_includeInstance) {
  return training.TrainingMethodOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!training.TrainingMethodOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
training.TrainingMethodOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    trainingmethodindicator: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!training.TrainingMethodOption}
 */
training.TrainingMethodOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new training.TrainingMethodOption;
  return training.TrainingMethodOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!training.TrainingMethodOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!training.TrainingMethodOption}
 */
training.TrainingMethodOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrainingmethodindicator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
training.TrainingMethodOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  training.TrainingMethodOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!training.TrainingMethodOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
training.TrainingMethodOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrainingmethodindicator();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string trainingMethodIndicator = 1;
 * @return {string}
 */
training.TrainingMethodOption.prototype.getTrainingmethodindicator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
training.TrainingMethodOption.prototype.setTrainingmethodindicator = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
training.UpdateModelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(training.UpdateModelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  training.UpdateModelRequest.displayName = 'training.UpdateModelRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
training.UpdateModelRequest.prototype.toObject = function(opt_includeInstance) {
  return training.UpdateModelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!training.UpdateModelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
training.UpdateModelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    updateModelDetails: (f = msg.getUpdateModelDetails()) && training.ModelDetails.toObject(includeInstance, f),
    authorization: (f = msg.getAuthorization()) && training.AuthorizationDetails.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!training.UpdateModelRequest}
 */
training.UpdateModelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new training.UpdateModelRequest;
  return training.UpdateModelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!training.UpdateModelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!training.UpdateModelRequest}
 */
training.UpdateModelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new training.ModelDetails;
      reader.readMessage(value,training.ModelDetails.deserializeBinaryFromReader);
      msg.setUpdateModelDetails(value);
      break;
    case 2:
      var value = new training.AuthorizationDetails;
      reader.readMessage(value,training.AuthorizationDetails.deserializeBinaryFromReader);
      msg.setAuthorization(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
training.UpdateModelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  training.UpdateModelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!training.UpdateModelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
training.UpdateModelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdateModelDetails();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      training.ModelDetails.serializeBinaryToWriter
    );
  }
  f = message.getAuthorization();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      training.AuthorizationDetails.serializeBinaryToWriter
    );
  }
};


/**
 * optional ModelDetails update_model_details = 1;
 * @return {?training.ModelDetails}
 */
training.UpdateModelRequest.prototype.getUpdateModelDetails = function() {
  return /** @type{?training.ModelDetails} */ (
    jspb.Message.getWrapperField(this, training.ModelDetails, 1));
};


/** @param {?training.ModelDetails|undefined} value */
training.UpdateModelRequest.prototype.setUpdateModelDetails = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


training.UpdateModelRequest.prototype.clearUpdateModelDetails = function() {
  this.setUpdateModelDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
training.UpdateModelRequest.prototype.hasUpdateModelDetails = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AuthorizationDetails authorization = 2;
 * @return {?training.AuthorizationDetails}
 */
training.UpdateModelRequest.prototype.getAuthorization = function() {
  return /** @type{?training.AuthorizationDetails} */ (
    jspb.Message.getWrapperField(this, training.AuthorizationDetails, 2));
};


/** @param {?training.AuthorizationDetails|undefined} value */
training.UpdateModelRequest.prototype.setAuthorization = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


training.UpdateModelRequest.prototype.clearAuthorization = function() {
  this.setAuthorization(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
training.UpdateModelRequest.prototype.hasAuthorization = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
training.ModelDetailsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(training.ModelDetailsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  training.ModelDetailsResponse.displayName = 'training.ModelDetailsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
training.ModelDetailsResponse.prototype.toObject = function(opt_includeInstance) {
  return training.ModelDetailsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!training.ModelDetailsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
training.ModelDetailsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    modelDetails: (f = msg.getModelDetails()) && training.ModelDetails.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!training.ModelDetailsResponse}
 */
training.ModelDetailsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new training.ModelDetailsResponse;
  return training.ModelDetailsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!training.ModelDetailsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!training.ModelDetailsResponse}
 */
training.ModelDetailsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!training.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = new training.ModelDetails;
      reader.readMessage(value,training.ModelDetails.deserializeBinaryFromReader);
      msg.setModelDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
training.ModelDetailsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  training.ModelDetailsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!training.ModelDetailsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
training.ModelDetailsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getModelDetails();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      training.ModelDetails.serializeBinaryToWriter
    );
  }
};


/**
 * optional Status status = 1;
 * @return {!training.Status}
 */
training.ModelDetailsResponse.prototype.getStatus = function() {
  return /** @type {!training.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!training.Status} value */
training.ModelDetailsResponse.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ModelDetails model_details = 2;
 * @return {?training.ModelDetails}
 */
training.ModelDetailsResponse.prototype.getModelDetails = function() {
  return /** @type{?training.ModelDetails} */ (
    jspb.Message.getWrapperField(this, training.ModelDetails, 2));
};


/** @param {?training.ModelDetails|undefined} value */
training.ModelDetailsResponse.prototype.setModelDetails = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


training.ModelDetailsResponse.prototype.clearModelDetails = function() {
  this.setModelDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
training.ModelDetailsResponse.prototype.hasModelDetails = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
training.Status = {
  CREATED: 0,
  IN_PROGRESS: 1,
  ERRORED: 2,
  COMPLETED: 3,
  DELETED: 4
};


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `myMethodOption`.
 * @type {!jspb.ExtensionFieldInfo<!training.TrainingMethodOption>}
 */
training.myMethodOption = new jspb.ExtensionFieldInfo(
    9999197,
    {myMethodOption: 0},
    training.TrainingMethodOption,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         training.TrainingMethodOption.toObject),
    0);

google_protobuf_descriptor_pb.MethodOptions.extensionsBinary[9999197] = new jspb.ExtensionFieldBinaryInfo(
    training.myMethodOption,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    training.TrainingMethodOption.serializeBinaryToWriter,
    training.TrainingMethodOption.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
google_protobuf_descriptor_pb.MethodOptions.extensions[9999197] = training.myMethodOption;

goog.object.extend(exports, training);
